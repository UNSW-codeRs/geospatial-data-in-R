---
title: "Geospatial tutorial - intro"
author: "JR Ferrer-Paris"
editor_options: 
  chunk_output_type: console
---


## Geospatial data in ***R***


### Rspatial and R-spatial


### 


class: inverse, middle, center

# Spatial as in `rspatial`

---

# Increasing integration of GIS and **R**

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) / [rspatial](https://github.com/rspatial)

Need to move spatial data into and out of R:

--

- link to external GIS software: e.g. _GRASS_ or _spgrass7_
- import and export standard vector and raster data: e.g. _raster_ package
- link to external libraries: e.g. _rgdal_

--

Handling of geographical information in a consistent way:

--

- own standard structure `Spatial...`: _sp_ package bundle
- projection and transformation using external libraries: _proj4_


---



---

# _rgdal_ package


```{r,message=FALSE}
require(rgdal)
```

Read a polygon from a vector layer using Geographical Data Abstraction Library (GDAL) and transform to the same projection as above:

```{r,eval=TRUE,echo=TRUE}
boundary_ll <- readOGR("../data/JBM.gpkg")
boundary_utm <- spTransform(boundary_ll, CRS("+proj=utm +zone=19n +datum=WGS84"))
```

---

# Common classes and methods

We can now perform a spatial query, which points overlay which polygon?:

```{r, eval=TRUE,echo=TRUE}
qry <- over(data_utm,boundary_utm)
head(qry)
```

---

# _raster_ package

.pull-left[
We can transform this prediction into a `raster` object, and export to a external file in any format we want:

```{r, eval=TRUE,echo=TRUE, dev='svg',fig.height=4, fig.width=4,dev='png'}
r_ik <- raster(ik[1])
plot(r_ik)
```

```{r, eval={!file.exists('../data/kriging-example.tif')}}
writeRaster(r_ik,
            '../data/kriging-example.tif',
            format='GTiff')

```

]

.pull-right[

```{r, eval=TRUE,echo=TRUE}

rgdal::GDALinfo('../data/kriging-example.tif')
```
]

---


# Increasing integration of GIS and **R**

```{r first 10 years packages plotz, fig.height=4, dev='svg',fig.height=6, fig.width=6,dev='svg',warning=FALSE,echo=FALSE,message=FALSE}

pkg_subset <- pkg_history %>% filter(first < "2011-12-20")

# (some) spatial packages:
pkg_subset %>% filter(name %in% c("sf","raster","sp",'rgee') | grepl("GRASS|grass|gdal|spatial|spat|geo|maps|leaflet|mapbox|plotly|proj4",name)) -> pkg_geospatial

selection <- c('sgeostat','GRASS','geoR','spatstat','rgdal','sp','rgee', 'raster','sf','leaflet','mapboxapi','plotly','proj4','spatial','geosphere')
pkg_geospatial %>% filter(name %in% selection) -> slc_geospatial

ggplot(pkg_subset, aes(as.Date(first), index)) +
  geom_line(size = 2,col=clrs[1]) +
  geom_rug(data=pkg_geospatial,aes(as.Date(first)),color=clrs[5],sides="b") +
  scale_x_date(date_breaks = '1 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 5000, 500)) +
  #scale_y_continuous(trans='log10') +
  xlab('') + ylab('') + theme_bw() +
  theme(plot.title = element_text(colour = clrs[2]), plot.subtitle = element_text(colour = clrs[6])) +
  labs(title='Cummulative number of R packages published on CRAN',
       subtitle=sprintf("ca. %s (geo)spatial packages!",nrow(pkg_geospatial))) +
  geom_text(data=slc_geospatial,aes(x=as.Date(first),y=index,label=name,angle=if_else(index<1500,45,0)),color=clrs[6])

```

---

class: inverse, middle, center

# Everything is spatial!

---

# Increasing integration of GIS and **R**

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) / [rspatial](https://github.com/rspatial)


Done:

- We can now move spatial data into and out of R

- Handling of geographical information is possible in a consistent way

- There are enough spatial packages to perform the basic GIS operations in **R**

--

To do:

- Visualization was still limited / static

- There are other/better options for spatial analysis


---

# GIS for everyone


.pull-left[
![](images/GIS-applications.png)

> [Â© Joseph K. Berry 2013](http://www.innovativegis.com/basis/mapanalysis/Default.htm)

]
.pull-right[
More and more users access and share spatial data:

- Tiles and Pyramids
- Requests over Web Map Service
- Grow of public datasets and repositories
- Cloud Computing
]
---

# R and GIS integration

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) / [rspatial](https://github.com/rspatial) /  [r-spatial](https://github.com/r-spatial)

New approaches in R make use of external libraries and services to improve visualisation and analysis:

--

- Adoption of open standards: "simple features" with [_sf_ package](https://github.com/r-spatial/sf/)

- Spatiotemporal arrays (Data cubes) with [_stars_ package](https://github.com/r-spatial/stars/)

--

- *Leaflet*: open-source JavaScript library for interactive maps, with [package _leaflet_](https://rstudio.github.io/leaflet/)

- *Plotly*: Create Interactive Web Graphics via 'plotly.js', with [package _plotly_](https://plotly.com/r/)

- *Mapbox GL JS*: open source JavaScript library to render interactive maps, [package _mapboxer_](https://github.com/crazycapivara/mapboxer)

--

- *Google's Eath Engine*: cloud computing platform for planetary-scale data analysis, [package _rgee_](https://github.com/r-spatial/rgee/)

---



# R + GIS : keeps growing

```{r full packages plot,fig.height=6, fig.width=6, dev='svg', warning=FALSE, echo=FALSE, message=FALSE}

# (some) spatial packages:
pkg_history %>% filter(name %in% c("sf","raster","sp",'rgee') | grepl("GRASS|grass|gdal|spatial|spat|geo|maps|leaflet|mapbox|plotly|proj4",name)) -> pkg_geospatial

selection <- c('sgeostat','GRASS','geoR','spatstat','rgdal','sp','rgee', 'raster','sf','leaflet','mapboxapi','plotly')
pkg_geospatial %>% filter(name %in% selection) -> slc_geospatial


ggplot(pkg_history, aes(as.Date(first), index)) +
  geom_line(size = 2,col=clrs[1]) +
  geom_rug(data=pkg_geospatial,aes(as.Date(first)),color=clrs[5],sides="b") +
  scale_x_date(date_breaks = '4 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 20000, 2500)) +
  #scale_y_continuous(trans='log10') +
  xlab('') + ylab('') + theme_bw() +
  theme(plot.title = element_text(colour = clrs[2]), plot.subtitle = element_text(colour = clrs[6])) +
  labs(title='Cummulative number of R packages published on CRAN',
       subtitle=sprintf("ca. %s (geo)spatial packages!",nrow(pkg_geospatial))) +
  geom_text(data=slc_geospatial,aes(x=as.Date(first),y=index+if_else(index<1500,500,0),label=name,angle=if_else(index<1500,45,0)),color=clrs[6])
```


---

# What has changed in 20 years

- **R** has matured with thousands of packages
- More comprehensive documentation and tutorials available
- Spatial data is literally everywhere!
- GIS has grown out of a single software package or environment
- There is always a lot to learn!

