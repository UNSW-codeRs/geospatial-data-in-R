---
title: "Geospatial tutorial - intro"
author: "JR Ferrer-Paris"
editor_options: 
  chunk_output_type: console
---

## Spatial data 

Basically, spatial data is not much more than ordinary data (vectors or matrices) with spatial properties. These are commonly summarised as coordinates representing their location in space (usually 2D or 3D).

$$ \mathrm{spatial} \ \mathrm{data} = \mathrm{data} + \mathrm{coordinates} $$
For example, a group of biologists are studying if the activity of a frog species in related to vegetation characteristics in a botanical garden. They use a paper map or a gps to write down coordinates of each sampling point and describe characteristics of the vegetation at these points.

## Geospatial data

Similarly, geospatial data is a special type of spatial data that uses a Coordinate Reference System (CRS) to translate locations on the earth to planar coordinates.

$$ \mathrm{geospatial} \ \mathrm{data} = \mathrm{data} + \mathrm{coords} + \mathrm{CRS} $$
For example: Consider data about trends in human population size in major cities of the world. We use geographic coordinates (latitude and longitude) to locate each city in the map of the world, and for each city we have several estimates of population size for each decade.

## Raster and vector

The two primary types of (geo-)spatial data are raster and vector data. 

**Raster data** is stored as a grid of values which are rendered on a map as pixels or cells. Each pixel value represents an area on the Earth’s surface with. **Vector data** structures represent specific features on the Earth’s surface, and assign attributes to those features.

### Rasters 

- Raster data is pixelated data where each pixel is associated with a specific location.
- Raster data always has an extent and a resolution.
- The extent is the geographical area covered by a raster.
- The resolution is the area covered by each pixel of a raster.

Examples of raster data: aerial photographs, satellite images, precipitation maps, elevation maps, landcover maps, etc.

One common file formats for raster data is the [GeoTIFF](https://en.wikipedia.org/wiki/GeoTIFF) format.

A raster file can contain data on multiple variables stored as **bands** (each band represents one variable) that share the same spatial properties (extent, resolution, etc).

### Vectors

- Vector data structures represent specific features on the Earth’s surface, and assign attributes to those features.
- Vectors are composed of discrete geometric locations that define the shape of the spatial object (points, lines, polygons).
- A table of attributes links each spatial object (row) with multiple attributes (columns).

Examples of vector data: sampling locations or cities, roads or routes, country boundaries.

There are many file formats for vector data: ESRI Shapefiles are very popular, OGC GeoPackage (GPKG) is an open and standards-based format, GeoJSON is used in many web applications.

## Steps of spatial analysis

### Visualisation

We can work with spatial data as regular data, and use coordinates as additional variables for visualisation. 

For example if we compare the population size in major cities of the world between 2010 and 2020, we can calculate population growth and use the coordinates to show where are the cities with largest growth.

```{r}
library(tmap)
data(metro)
data(World)

metro$growth <- (metro$pop2020 - metro$pop2010)/(metro$pop2010 * 10) * 100
my_map <- tm_shape(World,projection='+proj=robin') + 
  tm_polygons() +
  tm_text("iso_a3", size = "AREA", col = "gray30", root = 3) +
  tm_shape(metro) + tm_bubbles("pop2010", col = "growth",
  border.col = "black", border.alpha = 0.5,
  breaks = c(-Inf, 0, 2, 4, 6, Inf), palette = "-RdYlGn",
  title.size = "Metro population (2010)",
  title.col = "Annual growth rate (%)", id = "name",
  popup.vars = c("pop2010", "pop2020", "growth")) 

```


### Spatial operations

Calculating distances between datasets

### Spatial queries

Comparing two datasets


### Spatial regression techniques

extract + model non-spatial + predict back to spatial

model non-spatial + spatial structure 



### Spatial operations


- working with coordinates for spatial queries and operations, without modifying the data



Sometimes spatial data just looks like a regular plot

But there is a set of unique operation that combine both data and coordinates, for example:

- spatial aggregation,
- spatial interpolation and geostatistics,
- spatial regression techniques:
  - geostatistics (again!),
  - autoregressive models,
  - spatial structure in GLMM, 
  - point pattern analysis, etc


## Geospatial data and analysis

GeoSpatialData = Data + Coords + CRS

```{mermaid}
flowchart LR
    sp(spatial\ndata)
    data[data]
    xys[coords]
    sp ---|=| data ---|+| xys 
```

Simple geospatial analysis could focus on: 

- working with data, as we are used to, then add coords for viz
- work with coordinates for spatial queries and operations 
- work with coordinates + crs for spatial re-projection

But also:
- data + coordinates + crs: spatial interpolation
- data + coordinates: geostatistics, spatial structure in GLMM, point pattern analysis, etc

## Geospatial data in ***R***


### Rspatial and R-spatial

Fortunately a group of R users and developers started to tackle the issue of integrating Geographical Information Systems (GIS) into R.

The group of R packages in [rspatial](https://github.com/rspatial) allowed users to:

-   find more efficient ways to move spatial data into and out of R: e.g. *sp* package bundle
-   link to external GIS software: e.g. *GRASS* or *spgrass7*
-   import and export standard vector and raster data: e.g. *raster* package
-   link to external libraries: e.g. *rgdal*, *proj4*

More recently, the [r-spatial](https://github.com/r-spatial) group of packages (mind the "-" in the name...) updated, standardized and modernized many of these packages by: - adoption of open standards: "simple features" with [*sf* package](https://github.com/r-spatial/sf/) - handling of spatiotemporal arrays (Data cubes) with [*stars* package](https://github.com/r-spatial/stars/)

Also, the development of powerful external libraries and services allow better visualisation and analysis in R. Some options include:

-   *Leaflet*: open-source JavaScript library for interactive maps, with [package *leaflet*](https://rstudio.github.io/leaflet/)
-   *Plotly*: Create Interactive Web Graphics via 'plotly.js', with [package *plotly*](https://plotly.com/r/)
-   *Mapbox GL JS*: open source JavaScript library to render interactive maps, [package *mapboxer*](https://github.com/crazycapivara/mapboxer)
-   *Google's Eath Engine*: cloud computing platform for planetary-scale data analysis, [package *rgee*](https://github.com/r-spatial/rgee/)

Visit the [CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) for a comprehensive list of packages and links to many more resources.

### Plenty of options

Nowadays, there are plenty of options for working with spatial data in R:



# GIS and **R** side by side

Just mapping? use GIS software

Non spatial statistical analysis ? use **R**

![](images/Poster-Redonda-small.jpeg)

---

# Spatial analysis in **R**

---


# Spatial analysis in **R**

Early implementations of

- Kriging / geostatistics: _gstat_
- Spatial point patterns: _spatstats_
- Mixed effect models with spatial autocorrelation: _geoR_

But:

--

- Each package uses different data structure
- They assume data is already "spatial" (coordinates)
- No projection or transformation of data
- Visualisation: output as images for plotting in **R**
- Isolated from the GIS environment

---


# Not many options in **R**

```{r early packages plot,fig.height=6, fig.width=6,dev='svg',warning=FALSE,echo=FALSE,message=FALSE}

all_pkgs <- readRDS(file='../Rdata/R-package-list-archive.rds')
current_pkgs <- readRDS(file='../Rdata/R-package-list-current.rds')
pkg_history <- all_pkgs %>% bind_rows(current_pkgs) %>% group_by(name) %>% summarise(n_versions=n_distinct(version),first=min(last_modified),last=max(last_modified)) %>% arrange(first) %>% mutate(index=vctrs::vec_group_id(first))

pkg_subset <- pkg_history %>% filter(first < "2001-09-15")

# (some) spatial packages:
pkg_subset %>% filter(name %in% c("sf","raster","sp",'rgee') | grepl("GRASS|grass|gdal|spatial|spat|geo|maps|leaflet|mapbox|plotly|proj4",name)) -> pkg_geospatial

selection <- c('sgeostat','GRASS','geoR','spatstat','rgdal','sp','rgee', 'raster','sf','leaflet','mapboxapi','plotly','proj4','spatial','geosphere')
pkg_geospatial %>% filter(name %in% selection) -> slc_geospatial

clrs <- brewer.pal(6,"Paired")

ggplot(pkg_subset, aes(as.Date(first), index)) +
  geom_line(size = 2,col=clrs[1]) +
  geom_rug(data=pkg_geospatial,aes(as.Date(first)),color=clrs[5],sides="b") +
  scale_x_date(date_breaks = '1 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 500, 20)) +
  #scale_y_continuous(trans='log10') +
  xlab('') + ylab('') + theme_bw() +
  theme(plot.title = element_text(colour = clrs[2]), plot.subtitle = element_text(colour = clrs[6])) +
  labs(title='Cummulative number of R packages published on CRAN',
       subtitle=sprintf("ca. %s (geo)spatial packages!",nrow(pkg_geospatial))) +
  geom_text(data=slc_geospatial,aes(x=as.Date(first),y=index,label=name,angle=if_else(index<1500,45,0)),color=clrs[6])

```

---

class: inverse, middle, center

# Spatial as in `rspatial`

---

# Increasing integration of GIS and **R**

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) / [rspatial](https://github.com/rspatial)

Need to move spatial data into and out of R:

--

- link to external GIS software: e.g. _GRASS_ or _spgrass7_
- import and export standard vector and raster data: e.g. _raster_ package
- link to external libraries: e.g. _rgdal_

--

Handling of geographical information in a consistent way:

--

- own standard structure `Spatial...`: _sp_ package bundle
- projection and transformation using external libraries: _proj4_


---

# _sp_ package

Import "plain" point data and make it "spatial":

```{r,eval=TRUE,echo=TRUE}
require(sp)
data_ll <- read.csv("../data/JBM-points.csv")
# declare the names of two columns with coordinates
coordinates(data_ll) <- c("Longitude","Latitude")
# declare spatial projection (PROJ4 format)
proj4string(data_ll) <- CRS("+proj=longlat +datum=WGS84")
```

But we actually need another projection!... no problem!
--

```{r,eval=TRUE,echo=TRUE}
data_utm <- spTransform(data_ll, CRS("+proj=utm +zone=19 +datum=WGS84"))
```


---

# _rgdal_ package


```{r,message=FALSE}
require(rgdal)
```

Read a polygon from a vector layer using Geographical Data Abstraction Library (GDAL) and transform to the same projection as above:

```{r,eval=TRUE,echo=TRUE}
boundary_ll <- readOGR("../data/JBM.gpkg")
boundary_utm <- spTransform(boundary_ll, CRS("+proj=utm +zone=19n +datum=WGS84"))
```

---

# Common classes and methods

We can now perform a spatial query, which points overlay which polygon?:

```{r, eval=TRUE,echo=TRUE}
qry <- over(data_utm,boundary_utm)
head(qry)
```

---

# _raster_ package

.pull-left[
We can transform this prediction into a `raster` object, and export to a external file in any format we want:

```{r, eval=TRUE,echo=TRUE, dev='svg',fig.height=4, fig.width=4,dev='png'}
r_ik <- raster(ik[1])
plot(r_ik)
```

```{r, eval={!file.exists('../data/kriging-example.tif')}}
writeRaster(r_ik,
            '../data/kriging-example.tif',
            format='GTiff')

```

]

.pull-right[

```{r, eval=TRUE,echo=TRUE}

rgdal::GDALinfo('../data/kriging-example.tif')
```
]

---


# Increasing integration of GIS and **R**

```{r first 10 years packages plotz, fig.height=4, dev='svg',fig.height=6, fig.width=6,dev='svg',warning=FALSE,echo=FALSE,message=FALSE}

pkg_subset <- pkg_history %>% filter(first < "2011-12-20")

# (some) spatial packages:
pkg_subset %>% filter(name %in% c("sf","raster","sp",'rgee') | grepl("GRASS|grass|gdal|spatial|spat|geo|maps|leaflet|mapbox|plotly|proj4",name)) -> pkg_geospatial

selection <- c('sgeostat','GRASS','geoR','spatstat','rgdal','sp','rgee', 'raster','sf','leaflet','mapboxapi','plotly','proj4','spatial','geosphere')
pkg_geospatial %>% filter(name %in% selection) -> slc_geospatial

ggplot(pkg_subset, aes(as.Date(first), index)) +
  geom_line(size = 2,col=clrs[1]) +
  geom_rug(data=pkg_geospatial,aes(as.Date(first)),color=clrs[5],sides="b") +
  scale_x_date(date_breaks = '1 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 5000, 500)) +
  #scale_y_continuous(trans='log10') +
  xlab('') + ylab('') + theme_bw() +
  theme(plot.title = element_text(colour = clrs[2]), plot.subtitle = element_text(colour = clrs[6])) +
  labs(title='Cummulative number of R packages published on CRAN',
       subtitle=sprintf("ca. %s (geo)spatial packages!",nrow(pkg_geospatial))) +
  geom_text(data=slc_geospatial,aes(x=as.Date(first),y=index,label=name,angle=if_else(index<1500,45,0)),color=clrs[6])

```

---

class: inverse, middle, center

# Everything is spatial!

---

# Increasing integration of GIS and **R**

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) / [rspatial](https://github.com/rspatial)


Done:

- We can now move spatial data into and out of R

- Handling of geographical information is possible in a consistent way

- There are enough spatial packages to perform the basic GIS operations in **R**

--

To do:

- Visualization was still limited / static

- There are other/better options for spatial analysis


---

# GIS for everyone


.pull-left[
![](images/GIS-applications.png)

> [© Joseph K. Berry 2013](http://www.innovativegis.com/basis/mapanalysis/Default.htm)

]
.pull-right[
More and more users access and share spatial data:

- Tiles and Pyramids
- Requests over Web Map Service
- Grow of public datasets and repositories
- Cloud Computing
]
---

# R and GIS integration

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html) / [rspatial](https://github.com/rspatial) /  [r-spatial](https://github.com/r-spatial)

New approaches in R make use of external libraries and services to improve visualisation and analysis:

--

- Adoption of open standards: "simple features" with [_sf_ package](https://github.com/r-spatial/sf/)

- Spatiotemporal arrays (Data cubes) with [_stars_ package](https://github.com/r-spatial/stars/)

--

- *Leaflet*: open-source JavaScript library for interactive maps, with [package _leaflet_](https://rstudio.github.io/leaflet/)

- *Plotly*: Create Interactive Web Graphics via 'plotly.js', with [package _plotly_](https://plotly.com/r/)

- *Mapbox GL JS*: open source JavaScript library to render interactive maps, [package _mapboxer_](https://github.com/crazycapivara/mapboxer)

--

- *Google's Eath Engine*: cloud computing platform for planetary-scale data analysis, [package _rgee_](https://github.com/r-spatial/rgee/)

---



# R + GIS : keeps growing

```{r full packages plot,fig.height=6, fig.width=6, dev='svg', warning=FALSE, echo=FALSE, message=FALSE}

# (some) spatial packages:
pkg_history %>% filter(name %in% c("sf","raster","sp",'rgee') | grepl("GRASS|grass|gdal|spatial|spat|geo|maps|leaflet|mapbox|plotly|proj4",name)) -> pkg_geospatial

selection <- c('sgeostat','GRASS','geoR','spatstat','rgdal','sp','rgee', 'raster','sf','leaflet','mapboxapi','plotly')
pkg_geospatial %>% filter(name %in% selection) -> slc_geospatial


ggplot(pkg_history, aes(as.Date(first), index)) +
  geom_line(size = 2,col=clrs[1]) +
  geom_rug(data=pkg_geospatial,aes(as.Date(first)),color=clrs[5],sides="b") +
  scale_x_date(date_breaks = '4 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 20000, 2500)) +
  #scale_y_continuous(trans='log10') +
  xlab('') + ylab('') + theme_bw() +
  theme(plot.title = element_text(colour = clrs[2]), plot.subtitle = element_text(colour = clrs[6])) +
  labs(title='Cummulative number of R packages published on CRAN',
       subtitle=sprintf("ca. %s (geo)spatial packages!",nrow(pkg_geospatial))) +
  geom_text(data=slc_geospatial,aes(x=as.Date(first),y=index+if_else(index<1500,500,0),label=name,angle=if_else(index<1500,45,0)),color=clrs[6])
```


---

# What has changed in 20 years

- **R** has matured with thousands of packages
- More comprehensive documentation and tutorials available
- Spatial data is literally everywhere!
- GIS has grown out of a single software package or environment
- There is always a lot to learn!

